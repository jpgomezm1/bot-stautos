const Anthropic = require('@anthropic-ai/sdk');
const { InventoryService } = require('../services/inventoryService');

class VehicleConversationEngine {
  constructor() {
    this.anthropic = new Anthropic({
      apiKey: process.env.CLAUDE_API_KEY,
    });
    
    this.inventoryService = new InventoryService();
  }
  
  async processResponse(userMessage, leadData) {
    try {
      // Construir contexto de la conversaci√≥n
      const context = await this.buildConversationContext(leadData);
      
      // Usar Claude para procesar la respuesta de manera natural
      const claudeResponse = await this.getClaudeResponse(userMessage, context, leadData);
      
      return claudeResponse;
    } catch (error) {
      console.error('Error procesando con Claude:', error);
      
      // Respuestas de error m√°s naturales
      const errorResponses = [
        "Uy, se me trab√≥ el sistema un momentito üòÖ ¬øMe puedes repetir lo que me dijiste?",
        "Perd√≥n, parece que se me cort√≥ la conexi√≥n. ¬øQu√© me estabas diciendo?",
        "Ay no, mi internet est√° haciendo de las suyas. ¬øPodr√≠as decirme de nuevo qu√© necesitas?",
        "Disculpa, tuve un peque√±o problema t√©cnico. ¬øMe repites por favor?"
      ];
      
      return {
        type: 'error',
        message: errorResponses[Math.floor(Math.random() * errorResponses.length)],
        waitingFor: leadData.proceso?.step_actual || 'consulta_general',
        shouldRespondWithAudio: false
      };
    }
  }
  
  async buildConversationContext(leadData) {
    const { cliente, interes, proceso } = leadData;
    
    // Obtener inventario actual
    const inventory = await this.inventoryService.getInventory();
    
    return {
      clienteInfo: {
        telefono: cliente.celular,
        nombre: cliente.nombre || 'Cliente'
      },
      interesActual: interes,
      stepActual: proceso?.step_actual || 'saludo_inicial',
      inventarioDisponible: inventory.success ? {
        vehiculos: inventory.vehicles,
        marcas: inventory.brands,
        modelos: inventory.models,
        total: inventory.vehicles.length
      } : null,
      conversacionPrevia: proceso?.conversacion_historial || []
    };
  }
  
  async getClaudeResponse(userMessage, context, leadData) {
    const systemPrompt = `Eres Carlos, un vendedor colombiano de carros usados con m√°s de 15 a√±os de experiencia. Eres s√∫per natural, carism√°tico, confiable y tienes mucha labia para vender, pero de manera aut√©ntica y honesta.

Tu personalidad:
- Hablas como un colombiano real, usando expresiones naturales
- Eres c√°lido, amigable pero profesional  
- Te gusta hacer sentir al cliente como si fuera tu parcero
- Usas humor sutil y referencias colombianas cuando es apropiado
- No suenas rob√≥tico ni demasiado formal
- Siempre est√°s dispuesto a negociar y encontrar la mejor opci√≥n para el cliente
- Conoces muy bien los carros y das consejos √∫tiles

INFORMACI√ìN DEL CLIENTE:
- Tel√©fono: ${context.clienteInfo.telefono}
- Nombre: ${context.clienteInfo.nombre}

INTER√âS ACTUAL DEL CLIENTE:
${JSON.stringify(context.interesActual, null, 2)}

INVENTARIO DISPONIBLE:
${context.inventarioDisponible ? `
Total veh√≠culos en el lote: ${context.inventarioDisponible.total}
Marcas que tenemos: ${context.inventarioDisponible.marcas.join(', ')}

CARROS DISPONIBLES (primeros 15):
${context.inventarioDisponible.vehiculos.slice(0, 15).map(v => 
  `- ${v.Marca} ${v.Modelo} (${v.KM} km) - Ref: ${v.Referencia_Vehiculo}`
).join('\n')}
` : 'Inventario no disponible temporalmente'}

STEP ACTUAL: ${context.stepActual}

CONTEXTO DE CONVERSACI√ìN PREVIA:
${context.conversacionPrevia.length > 0 ? 
  context.conversacionPrevia.slice(-3).map(conv => 
    `Usuario: ${conv.user_message}\nCarlos: ${conv.bot_response}`
  ).join('\n\n') : 
  'Primera interacci√≥n con el cliente'
}

INSTRUCCIONES PARA RESPONDER:
1. Responde como Carlos, el vendedor carism√°tico
2. S√© conversacional y natural - como si fueras un amigo recomendando carros
3. No uses listas con vi√±etas (‚Ä¢) ni formatos rob√≥ticos
4. Habla de los carros con pasi√≥n y conocimiento
5. Cuando muestres opciones, hazlo de manera fluida en p√°rrafos naturales
6. Usa expresiones colombianas naturales pero no exageres
7. Pregunta cosas relevantes para entender mejor qu√© necesita
8. Si no sabes algo espec√≠fico del inventario, s√© honesto pero optimista
9. Mant√©n la conversaci√≥n fluyendo hacia agendar una cita
10. Usa emojis con moderaci√≥n y de manera natural
11. SIEMPRE responde en JSON v√°lido
12. Ten en cuenta la conversaci√≥n previa para mantener continuidad
13. Si el cliente repite algo, no act√∫es como si fuera la primera vez

EJEMPLOS DE C√ìMO HABLAR:
- "¬°Ey! Qu√© tal, me da mucho gusto saludarte"
- "Mira, te tengo unas opciones que te van a encantar"
- "Te cuento que ese carro es una belleza"
- "¬øSabes qu√©? Tengo algo perfecto para ti"
- "Ese s√≠ est√° divino, yo mismo lo probar√≠a"
- "Tranquilo, ac√° encontramos lo que necesitas"
- "Dale pues, vamos viendo qu√© opciones hay"
- "¬°Qu√© m√°s parcero! Me alegra que me escribas"

PROCESO DE VENTA NATURAL:
- Saludo c√°lido y genuino
- Entender qu√© busca realmente (no solo tipo, sino uso, familia, etc.)
- Mostrar opciones que realmente le convengan
- Contar historias breves sobre los carros si es apropiado
- Generar confianza hablando de garant√≠as, revisiones, etc.
- Invitar a ver el carro cuando haya inter√©s genuino

RESPONDE ESTRICTAMENTE EN ESTE FORMATO JSON (sin texto adicional antes o despu√©s):
{
  "message": "tu respuesta s√∫per natural como Carlos",
  "extracted_data": {},
  "next_action": "mostrar_vehiculos|agendar_cita|confirmar_cita|continuar_consulta",
  "waiting_for": "paso_siguiente",
  "vehiculos_mostrados": [],
  "appointment_date": null
}`;

    const userPrompt = `El cliente dice: "${userMessage}"

Responde como Carlos, el vendedor natural y carism√°tico. Mant√©n la continuidad de la conversaci√≥n previa y construye sobre lo que ya han hablado.`;

    try {
      const response = await this.anthropic.messages.create({
        model: "claude-3-5-sonnet-20241022",
        max_tokens: 1500,
        temperature: 0.8,
        system: systemPrompt,
        messages: [{ role: "user", content: userPrompt }]
      });

      let responseText = response.content[0].text.trim();
      
      // Limpiar el texto para asegurar JSON v√°lido
      responseText = responseText.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      
      // Buscar el JSON en el texto
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        responseText = jsonMatch[0];
      }

      // Validar que sea JSON v√°lido antes de parsear
      let claudeResponse;
      try {
        claudeResponse = JSON.parse(responseText);
      } catch (parseError) {
        console.error('Error parseando JSON de Claude:', parseError);
        console.error('Respuesta recibida:', responseText);
        
        // Crear respuesta de fallback
        claudeResponse = {
          message: "Disculpa, tuve un peque√±o problema t√©cnico. ¬øMe repites por favor?",
          extracted_data: {},
          next_action: "continuar_consulta",
          waiting_for: "consulta_general",
          vehiculos_mostrados: [],
          appointment_date: null
        };
      }
      
      // Procesar la respuesta de Claude
      return this.processClaudeResponse(claudeResponse, leadData);
      
    } catch (error) {
      console.error('Error con Claude:', error);
      console.error('Respuesta completa:', response?.content?.[0]?.text);
      throw error;
    }
  }
  
  processClaudeResponse(claudeResponse, leadData) {
    const { message, extracted_data, next_action, waiting_for, vehiculos_mostrados, appointment_date } = claudeResponse;
    
    // Determinar el tipo de respuesta
    let responseType = 'consultation';
    
    if (next_action === 'agendar_cita') {
      responseType = 'schedule_appointment';
    } else if (next_action === 'confirmar_cita' && appointment_date) {
      responseType = 'appointment_confirmed';
    } else if (next_action === 'mostrar_vehiculos') {
      responseType = 'show_vehicles';
    }
    
    // Agregar el mensaje al historial de conversaci√≥n
    const conversationHistory = leadData.proceso?.conversacion_historial || [];
    conversationHistory.push({
      timestamp: new Date(),
      user_message: leadData.lastUserMessage || '',
      bot_response: message,
      action: next_action,
      was_audio: leadData.lastMessageWasAudio || false
    });
    
    // Guardar solo los √∫ltimos 15 intercambios para no sobrecargar
    if (conversationHistory.length > 15) {
      conversationHistory.splice(0, conversationHistory.length - 15);
    }
    
    // Extraer informaci√≥n adicional del mensaje del usuario si es relevante
    const additionalData = this.extractAdditionalData(leadData.lastUserMessage || '', extracted_data);
    
    return {
      type: responseType,
      message: message,
      waitingFor: waiting_for || leadData.proceso?.step_actual,
      extractedData: {
        ...additionalData,
        ...extracted_data,
        conversacion_historial: conversationHistory
      },
      vehiculosMostrados: vehiculos_mostrados || [],
      appointmentDate: appointment_date,
      shouldRespondWithAudio: leadData.lastMessageWasAudio // Mantener el formato del usuario
    };
  }
  
  extractAdditionalData(userMessage, existingData) {
    const lowerMessage = userMessage.toLowerCase();
    const additionalData = { ...existingData };
    
    // Extraer marcas mencionadas
    const commonBrands = ['toyota', 'chevrolet', 'nissan', 'hyundai', 'kia', 'mazda', 'volkswagen', 'ford', 'honda', 'suzuki', 'mitsubishi', 'renault'];
    const mentionedBrands = commonBrands.filter(brand => lowerMessage.includes(brand));
    
    if (mentionedBrands.length > 0 && !additionalData.marca_interes) {
      additionalData.marca_interes = mentionedBrands[0].charAt(0).toUpperCase() + mentionedBrands[0].slice(1);
    }
    
    // Extraer tipos de veh√≠culo
    const vehicleTypes = {
      'suv': 'SUV',
      'sedan': 'Sedan',
      'camioneta': 'Camioneta',
      'hatchback': 'Hatchback',
      'pickup': 'Pickup',
      'familiar': 'Familiar'
    };
    
    for (const [key, value] of Object.entries(vehicleTypes)) {
      if (lowerMessage.includes(key) && !additionalData.tipo_vehiculo) {
        additionalData.tipo_vehiculo = value;
        break;
      }
    }
    
    // Extraer presupuesto aproximado
    const budgetMatch = userMessage.match(/(\d+)\s*(millones?|mill)/i);
    if (budgetMatch && !additionalData.presupuesto_max) {
      const amount = parseInt(budgetMatch[1]) * 1000000;
      additionalData.presupuesto_max = amount;
    }
    
    // Detectar uso del veh√≠culo
    const usagePatterns = {
      'trabajo': 'Trabajo',
      'familia': 'Familiar',
      'finca': 'Campo/Finca',
      'cargar': 'Carga',
      'personal': 'Personal'
    };
    
    for (const [key, value] of Object.entries(usagePatterns)) {
      if (lowerMessage.includes(key) && !additionalData.uso_vehiculo) {
        additionalData.uso_vehiculo = value;
        break;
      }
    }
    
    // Detectar referencias espec√≠ficas de veh√≠culos
    const refMatch = userMessage.match(/VEH\d+|REF[\-\s]*\d+/gi);
    if (refMatch && !additionalData.vehiculo_consultado) {
      additionalData.vehiculo_consultado = refMatch[0];
      
      if (!additionalData.vehiculos_consultados) {
        additionalData.vehiculos_consultados = [];
      }
      
      if (!additionalData.vehiculos_consultados.includes(refMatch[0])) {
        additionalData.vehiculos_consultados.push(refMatch[0]);
      }
    }
    
    return additionalData;
  }
}

module.exports = { VehicleConversationEngine };